{"version":3,"sources":["abstractions/GitHubCdn.ts","cdn/Vercel.ts","components/Changelog.tsx","components/Spinner.tsx","servers/OnyxBay/Changelog.tsx","abstractions/GitHubRepository.ts","servers/OnyxBay/Repository.ts","abstractions/GameServer.ts","servers/OnyxBay/Servers.tsx","servers/OnyxBay/Constants.tsx","components/ServersList.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["GitHubCDN","cdn","this","url","fetch","method","mode","repository","filePath","Fetch","Join","response","json","owner","name","branch","Vercel","ChangelogLayout","props","className","theme","children","Body","Header","Spinner","text","Changelog","renderDate","Date","date","Author","author","Changes","changes","dateTimeFormat","Intl","DateTimeFormat","day","month","year","format","PrLink","href","pr","Change","prefix","change","toLowerCase","COLOR_BINDINGS","ICON_BINDINGS","rehypePlugins","raw","transformLinkUri","message","map","index","serverName","LINKS","link","title","icon","previousDate","changelog","entry","drawDate","Error","OnyxBayChangelogLayout","error","length","loadChangelog","server","onError","onSuccessful","LoadChangelogAsync","catch","reason","then","data","GitHubRepository","ChaoticOnyx","Eos","GameServer","changelogFilePath","FetchJsonAsync","Repository","useState","undefined","setError","setChangelog","useEffect","_","bugfix","tweak","soundadd","sounddel","rscadd","rscdel","imageadd","imagedel","maptweak","spellcheck","experiment","admin","balance","ServersList","Entry","to","id","CDN","SERVERS","chaotic","Servers","eos","ServersSelection","keys","Object","App","ServerComponent","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c1ff8dbf.chunk.js","sourcesContent":["import { GitHubRepository } from './GitHubRepository'\r\n\r\n/**\r\n * Класс для получения данных GitHub через CDN.\r\n */\r\nexport abstract class GitHubCDN {\r\n  /**\r\n   * URL используемого CDN (без / в конце).\r\n   */\r\n  public cdn: string\r\n\r\n  constructor (cdn: string) {\r\n    this.cdn = cdn\r\n  }\r\n\r\n  protected async Fetch (url: string): Promise<Response> {\r\n    return await fetch(`${this.cdn}/${url}`, {\r\n      method: 'GET',\r\n      mode: 'cors'\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Получение данных по указанному пути для указанного репозитория в формате JSON.\r\n   * @param repository Репозиторий из которого нужно получить данные.\r\n   * @param filePath Путь до данных (без / в конце).\r\n   */\r\n  public async FetchJsonAsync (repository: GitHubRepository, filePath: string): Promise<unknown> {\r\n    const response = await this.Fetch(this.Join(repository, filePath))\r\n    return await response.json()\r\n  }\r\n\r\n  /**\r\n   * Объединяет информацию о репозитории и путь до файла в один путь (без / в конце).\r\n   * @param repository Репозиторий к которому нужно привязать путь.\r\n   * @param filePath Путь до данных.\r\n   * @example join({ name: 'OnyxBay', owner: 'ChaoticOnyx' }, '/html/changelog.html') => '/ChaoticOnyx/OnyxBay/html/changelog.html'\r\n   */\r\n  public Join (repository: GitHubRepository, filePath: string): string {\r\n    return `${repository.owner}/${repository.name}/${repository.branch}${filePath}`\r\n  }\r\n}\r\n","import { GitHubCDN } from '../abstractions/GitHubCdn'\r\n\r\n/**\r\n * Представляет Vercel CDN.\r\n */\r\nexport class Vercel extends GitHubCDN {\r\n  constructor () {\r\n    super('https://github-cdn.vercel.app')\r\n  }\r\n}\r\n","import React, { ReactNode } from 'react'\r\nimport '../styles/Changelog.scss'\r\n\r\n/**\r\n * Пропсы для {@link ChangelogLayout}.\r\n */\r\nexport interface ChangelogProps {\r\n  /**\r\n   * Тема чейнджлога, подставляется с префиксом theme-.\r\n   */\r\n  theme?: string\r\n\r\n  children: ReactNode\r\n}\r\n\r\n/**\r\n * Основной компонент чейнджлога.\r\n */\r\nexport const ChangelogLayout = (props: ChangelogProps) => {\r\n  return <div className={`ChangelogLayout ${props.theme ? `theme-${props.theme}` : ''}`}>\r\n    {props.children}\r\n  </div>\r\n}\r\n\r\n/**\r\n * Пропсы для {@link ChangelogLayout.Body}.\r\n */\r\nexport interface BodyProps {\r\n  children: ReactNode\r\n}\r\n\r\nconst Body = (props: BodyProps) => {\r\n  return <div className='ChangelogLayout__body'>\r\n    {props.children}\r\n  </div>\r\n}\r\n\r\n/**\r\n * Шапка чейнджлога.\r\n */\r\nChangelogLayout.Body = Body\r\n\r\n/**\r\n * Пропсы для {@link ChangelogLayout.Header}\r\n */\r\n interface HeaderProps {\r\n  children: ReactNode\r\n}\r\n\r\nconst Header = (props: HeaderProps) => {\r\n  return <div className='ChangelogLayout__header'>\r\n    {props.children}\r\n  </div>\r\n}\r\n\r\n/**\r\n * Шапка чейнджлога.\r\n */\r\nChangelogLayout.Header = Header\r\n","import React from 'react'\r\nimport '../styles/Spinner.scss'\r\n\r\n/**\r\n * Пропсы для {@link Spinner}\r\n */\r\nexport interface SpinnerProps {\r\n  /**\r\n   * Сообщение.\r\n   */\r\n  text: string;\r\n}\r\n\r\n/**\r\n * Спиннер.\r\n */\r\nexport const Spinner = (props: SpinnerProps) => {\r\n  return <div className='Spinner'>\r\n    <i className='Spinner__icon fas fa-spinner'>\r\n    </i><span className='Spinner__text'>{props.text}</span>\r\n  </div>\r\n}\r\n","import React from 'react'\r\nimport ReactMarkdown from 'react-markdown'\r\nimport raw from 'rehype-raw'\r\nimport { COLOR_BINDINGS, ICON_BINDINGS, LINKS } from '.'\r\nimport { GameServer } from '../../abstractions/GameServer'\r\nimport { GitHubCDN } from '../../abstractions/GitHubCdn'\r\nimport { ChangelogLayout } from '../../components/Changelog'\r\nimport { Spinner } from '../../components/Spinner'\r\n\r\nexport interface ChangeEntry {\r\n  /**\r\n   * Префикс изменения.\r\n   */\r\n  prefix: string\r\n  /**\r\n   * Описание изменения.\r\n   */\r\n  message: string\r\n  /**\r\n   * Номер PR с которым связано изменение.\r\n   */\r\n  pr?: number\r\n}\r\n\r\nexport interface ChangelogEntry {\r\n  /**\r\n   * Имя автора.\r\n   */\r\n  author: string\r\n  /**\r\n   * Дата изменения в формате `YYYY-MM-DD`.\r\n   */\r\n  date: string\r\n  /**\r\n   * Описание изменении.\r\n   */\r\n  changes: ChangeEntry[]\r\n\r\n  /**\r\n   * Нужно ли выводить дату.\r\n   */\r\n  renderDate: boolean\r\n}\r\n\r\n/**\r\n * Компонент для рендеринга записи из чейнджлога.\r\n */\r\nexport const Changelog = (props: ChangelogEntry) => {\r\n  return <div className='Changelog'>\r\n    {props.renderDate ? <Changelog.Date date={props.date} /> : ''}\r\n    <Changelog.Author author={props.author} />\r\n    <Changelog.Changes changes={props.changes} />\r\n  </div>\r\n}\r\n\r\ninterface DateHeaderProps {\r\n  date: string\r\n}\r\n\r\nconst dateTimeFormat = new Intl.DateTimeFormat('ru-RU', { day: 'numeric', month: 'long', year: 'numeric' })\r\n\r\nconst DateHeader = (props: DateHeaderProps) => {\r\n  return <div className='Changelog__date'>\r\n    <span>{dateTimeFormat.format(new Date(props.date))}</span>\r\n  </div>\r\n}\r\n\r\nChangelog.Date = DateHeader\r\n\r\ninterface ChangeAuthorProps {\r\n  author: string\r\n}\r\n\r\nconst Author = (props: ChangeAuthorProps) => {\r\n  return <h3 className='Changelog__author'>{props.author} updated:</h3>\r\n}\r\n\r\nChangelog.Author = Author\r\n\r\ninterface PrLinkProps {\r\n  pr: number;\r\n}\r\n\r\nconst PrLink = (props: PrLinkProps) => {\r\n  return <sup className='PR'>\r\n    <a className='PR__link' href={`https://github.com/ChaoticOnyx/OnyxBay/pull/${props.pr}`}>#{props.pr}</a>\r\n  </sup>\r\n}\r\n\r\ninterface ChangeProps {\r\n  change: ChangeEntry\r\n}\r\n\r\nconst Change = (props: ChangeProps) => {\r\n  const prefix = props.change.prefix.toLowerCase()\r\n\r\n  return <li className={`Changes__change ${COLOR_BINDINGS[prefix]}`}>\r\n    <i className={ICON_BINDINGS[prefix]} />\r\n    <ReactMarkdown rehypePlugins={\r\n      // @ts-expect-error\r\n      [raw]} transformLinkUri={null}>{props.change.message}</ReactMarkdown>\r\n    {props.change.pr ? <PrLink pr={props.change.pr} /> : ''}\r\n  </li>\r\n}\r\n\r\ninterface ChangesProps {\r\n  changes: ChangeEntry[]\r\n}\r\n\r\nconst Changes = (props: ChangesProps) => {\r\n  return <ul className='Changes'>{props.changes.map((change, index) => {\r\n    return <Change key={index} change={change} />\r\n  })}</ul>\r\n}\r\n\r\nChangelog.Changes = Changes\r\n\r\nconst Header = (props: { serverName: string }) => {\r\n  return <>\r\n    <h2>{`Список изменений сервера ${props.serverName}`}</h2>\r\n    <p>Разработка ведется при помощи игроков, которые поддерживают сервер своими пожертвованиями!\r\n      Если вы хотите поддержать нас и принять участие в голосовании за то, какие фичи будут реализованы следующими,\r\n      то подробную информацию можно найти в новостях на нашем сервере Discord!</p>\r\n    <div className='Links'>\r\n      {LINKS.map((link, index) => {\r\n        return <a key={index} title={link.title} href={link.url}>\r\n          <i className={link.icon}></i>\r\n        </a>\r\n      })}\r\n    </div>\r\n  </>\r\n}\r\n\r\ninterface BodyProps {\r\n  changelog: ChangelogEntry[]\r\n}\r\n\r\nconst Body = (props: BodyProps) => {\r\n  let previousDate: string = ''\r\n\r\n  return <>\r\n    {props.changelog.map((entry, index) => {\r\n      let drawDate = true\r\n\r\n      if (previousDate === entry.date) {\r\n        drawDate = false\r\n      } else {\r\n        previousDate = entry.date\r\n      }\r\n\r\n      return <Changelog key={index} {...entry} renderDate={drawDate} />\r\n    })}\r\n  </>\r\n}\r\n\r\ninterface ErrorProps {\r\n  message: string\r\n}\r\n\r\nconst Error = (props: ErrorProps) => {\r\n  return <div className='Error'>{props.message}</div>\r\n}\r\n\r\n/**\r\n * Пропсы для {@link OnyxBayChangelogLayout}\r\n */\r\n interface OnyxBayChangelogLayoutProps {\r\n  error?: string,\r\n  changelog: ChangelogEntry[],\r\n  serverName: string\r\n}\r\n\r\nexport const OnyxBayChangelogLayout = (props: OnyxBayChangelogLayoutProps) => {\r\n  return <ChangelogLayout theme='onyx'>\r\n  <ChangelogLayout.Header>\r\n    <Header serverName={props.serverName} />\r\n  </ChangelogLayout.Header>\r\n  <ChangelogLayout.Body>\r\n    {props.error\r\n      ? <Error message={props.error} />\r\n      : props.changelog.length\r\n        ? <Body changelog={props.changelog} />\r\n        : <Spinner text='Загрузка чейнджлогов' />}\r\n  </ChangelogLayout.Body>\r\n</ChangelogLayout>\r\n}\r\n\r\nexport const loadChangelog = (cdn: GitHubCDN, server: GameServer, onError: (reason: string) => void, onSuccessful: (data: unknown) => void) => {\r\n  server.LoadChangelogAsync(cdn)\r\n    .catch(reason => onError(reason))\r\n    .then(data => onSuccessful(data))\r\n}\r\n","/**\r\n * Класс представляющий репозитории GitHub.\r\n */\r\nexport abstract class GitHubRepository {\r\n  /**\r\n   * Название репозитория.\r\n   */\r\n  public readonly name: string\r\n\r\n  /**\r\n   * Владелец репозитория.\r\n   */\r\n  public readonly owner: string\r\n\r\n  /**\r\n   * Ветка с чейнджлогом.\r\n   */\r\n  public readonly branch: string\r\n\r\n  constructor (name: string, owner: string, branch: string) {\r\n    this.name = name\r\n    this.owner = owner\r\n    this.branch = branch\r\n  }\r\n\r\n  /**\r\n   * Получение ссылки на GitHub репозитории.\r\n   */\r\n  public getUrl () {\r\n    return `https://github.com/${this.owner}/${this.name}`\r\n  }\r\n}\r\n","import { GitHubRepository } from '../../abstractions/GitHubRepository'\r\n\r\n/**\r\n * Класс, представляющий репозитории Chaotic Onyx.\r\n */\r\nexport class ChaoticOnyx extends GitHubRepository {\r\n  constructor () {\r\n    super('OnyxBay', 'ChaoticOnyx', 'release%2Fchaotic')\r\n  }\r\n}\r\n\r\nexport class Eos extends GitHubRepository {\r\n  constructor () {\r\n    super('OnyxBay', 'ChaoticOnyx', 'release%2Feos')\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { GitHubCDN } from './GitHubCdn'\r\nimport { GitHubRepository } from './GitHubRepository'\r\n\r\n/**\r\n * Класс представляющий игровой сервер SS13.\r\n */\r\nexport abstract class GameServer {\r\n  /**\r\n   * GitHub репозиторий сервера.\r\n   */\r\n  public readonly repository: GitHubRepository\r\n\r\n  /**\r\n   * Путь до чейнджлог файла (без / в конце).\r\n   */\r\n  public readonly changelogFilePath: string\r\n\r\n  /**\r\n   * Название сервера.\r\n   */\r\n  public readonly name: string\r\n\r\n  constructor (name: string, repository: GitHubRepository, changelogFilePath: string) {\r\n    this.name = name\r\n    this.repository = repository\r\n    this.changelogFilePath = changelogFilePath\r\n  }\r\n\r\n  /**\r\n   * Загружает чейнджлоги через CDN.\r\n   * @param cdn Используемый CDN.\r\n   * @returns Чейнджлог в формате JSON.\r\n   */\r\n  public async LoadChangelogAsync (cdn: GitHubCDN) {\r\n    return await cdn.FetchJsonAsync(this.repository, this.changelogFilePath)\r\n  }\r\n\r\n  /**\r\n   * Возвращает компонент для отрисовки чейнджлога.\r\n   */\r\n  public abstract Changelog(cdn: GitHubCDN): () => React.ReactElement\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport * as Repository from './Repository'\r\nimport { GameServer } from '../../abstractions/GameServer'\r\nimport { GitHubCDN } from '../../abstractions/GitHubCdn'\r\nimport { ChangelogEntry, loadChangelog, OnyxBayChangelogLayout } from '.'\r\n\r\n/**\r\n * Сервер Chaotic Onyx.\r\n */\r\nexport class ChaoticOnyx extends GameServer {\r\n  constructor () {\r\n    super('Chaotic Onyx', new Repository.ChaoticOnyx(), '/html/changelogs/.all_changelog.json')\r\n  }\r\n\r\n  public Changelog (cdn: GitHubCDN) {\r\n    // eslint-disable-next-line react/display-name\r\n    return () => {\r\n      const [error, setError] = useState<string | undefined>(undefined)\r\n      const [changelog, setChangelog] = useState<ChangelogEntry[]>([])\r\n\r\n      useEffect(() => {\r\n        loadChangelog(cdn, this,\r\n          _ => setError('Проблемы с подключением ⚠️'),\r\n          data => setChangelog(\r\n            data as ChangelogEntry[]\r\n          ))\r\n      }, [])\r\n\r\n      return <OnyxBayChangelogLayout serverName='Chaotic Onyx' changelog={changelog} error={error} />\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Сервер EOS.\r\n */\r\nexport class Eos extends GameServer {\r\n  constructor () {\r\n    super('EOS', new Repository.Eos(), '/html/changelogs/.all_changelog.json')\r\n  }\r\n\r\n  public Changelog (cdn: GitHubCDN) {\r\n    // eslint-disable-next-line react/display-name\r\n    return () => {\r\n      const [error, setError] = useState<string | undefined>(undefined)\r\n      const [changelog, setChangelog] = useState<ChangelogEntry[]>([])\r\n\r\n      useEffect(() => {\r\n        loadChangelog(cdn, this,\r\n          _ => setError('Проблемы с подключением ⚠️'),\r\n          data => setChangelog(\r\n            data as ChangelogEntry[]\r\n          ))\r\n      }, [])\r\n\r\n      return <OnyxBayChangelogLayout serverName='EOS' changelog={changelog} error={error} />\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Префиксы изменении.\r\n */\r\nexport type ChangePrefix = 'bugfix'\r\n                  | 'tweak'\r\n                  | 'soundadd'\r\n                  | 'sounddel'\r\n                  | 'rscadd'\r\n                  | 'rscdel'\r\n                  | 'imageadd'\r\n                  | 'imagedel'\r\n                  | 'maptweak'\r\n                  | 'spellcheck'\r\n                  | 'experiment'\r\n                  | 'admin'\r\n                  | 'balance'\r\n\r\n/**\r\n * Биндинги префикса изменения к Font Awesome иконки.\r\n */\r\n// WTF\r\n// eslint-disable-next-line no-unused-vars\r\nexport const ICON_BINDINGS: {[key in ChangePrefix as string]: string} = {\r\n  bugfix: 'fas fa-bug',\r\n  tweak: 'fas fa-wrench',\r\n  soundadd: 'fas fa-music',\r\n  sounddel: 'fas fa-minus',\r\n  rscadd: 'fas fa-plus',\r\n  rscdel: 'fas fa-minus',\r\n  imageadd: 'fas fa-palette',\r\n  imagedel: 'fas fa-minus',\r\n  maptweak: 'far fa-compass',\r\n  spellcheck: 'fas fa-spell-check',\r\n  experiment: 'fas fa-hard-hat',\r\n  admin: 'fas fa-crown',\r\n  balance: 'fas fa-balance-scale'\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nexport const COLOR_BINDINGS: {[key in ChangePrefix as string] : string} = {\r\n  bugfix: 'green',\r\n  tweak: 'green',\r\n  soundadd: 'green',\r\n  rscadd: 'green',\r\n  imageadd: 'green',\r\n  maptweak: 'green',\r\n  spellcheck: 'green',\r\n  admin: 'green',\r\n  balance: 'yellow',\r\n  experiment: 'yellow',\r\n  sounddel: 'red',\r\n  rscdel: 'red',\r\n  imagedel: 'red'\r\n}\r\n\r\ninterface Link {\r\n  title: string\r\n  url: string\r\n  icon: string\r\n}\r\n\r\nexport const LINKS: Link[] = [\r\n  {\r\n    title: 'Patreon',\r\n    url: 'https://www.patreon.com/chaoticonyx',\r\n    icon: 'fab fa-patreon'\r\n  },\r\n  {\r\n    title: 'Wiki',\r\n    url: 'https://wiki.ss13.ru',\r\n    icon: 'fas fa-book'\r\n  },\r\n  {\r\n    title: 'GitHub',\r\n    url: 'https://github.com/ChaoticOnyx/OnyxBay',\r\n    icon: 'fab fa-github'\r\n  },\r\n  {\r\n    title: 'Discord',\r\n    url: 'https://discord.gg/5BRMMFg',\r\n    icon: 'fab fa-discord'\r\n  }\r\n]\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { GameServer } from '../abstractions/GameServer'\r\nimport '../styles/ServersList.scss'\r\n\r\n/**\r\n * Пропсы для {@link ServersListProps}\r\n */\r\ninterface ServersListProps {\r\n  children: React.ReactNode\r\n}\r\n\r\nexport const ServersList = (props: ServersListProps) => {\r\n  return <div className='ServersList'>\r\n    <h1 className='ServersList__title'>Список серверов:</h1>\r\n    {props.children}\r\n  </div>\r\n}\r\n\r\n/**\r\n * Пропсы для {@link ServersListEntry}\r\n */\r\ninterface ServersListEntryProps {\r\n  /**\r\n   * Игровой сервер.\r\n   */\r\n  server: GameServer,\r\n\r\n  /**\r\n   * ID сервера. Используется для навигации по приложению.\r\n   */\r\n  id: string\r\n}\r\n\r\nconst ServersListEntry = (props: ServersListEntryProps) => {\r\n  const { server } = props\r\n\r\n  return <h3 className='ServersList__entry'>\r\n    <Link to={`/${props.id}`}>{server.name}</Link>\r\n  </h3>\r\n}\r\n\r\nServersList.Entry = ServersListEntry\r\n","import React from 'react'\r\nimport { Route, Switch } from 'react-router'\r\nimport { GameServer } from '../abstractions/GameServer'\r\nimport * as CDN from '../cdn'\r\nimport { Servers } from '../servers/OnyxBay'\r\nimport { ServersList } from './ServersList'\r\n\r\nconst cdn = new CDN.Vercel()\r\n\r\nconst SERVERS: { [key: string]: GameServer } = {\r\n  chaotic: new Servers.ChaoticOnyx(),\r\n  eos: new Servers.Eos()\r\n}\r\n\r\nconst ServersSelection = () => {\r\n  const keys = Object.keys(SERVERS)\r\n\r\n  return <ServersList>\r\n  {keys.map(id => {\r\n    return <ServersList.Entry key={id} id={id} server={SERVERS[id]} />\r\n  })}\r\n</ServersList>\r\n}\r\n\r\nexport const App = () => {\r\n  const keys = Object.keys(SERVERS)\r\n\r\n  return <Switch>\r\n    {keys.map(id => {\r\n      const ServerComponent = SERVERS[id].Changelog(cdn)\r\n\r\n      return <Route key={id} path={`/${id}`}>\r\n          <ServerComponent />\r\n        </Route>\r\n    })}\r\n    <Route>\r\n      <ServersSelection />\r\n    </Route>\r\n  </Switch>\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals'\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry)\r\n      getFID(onPerfEntry)\r\n      getFCP(onPerfEntry)\r\n      getLCP(onPerfEntry)\r\n      getTTFB(onPerfEntry)\r\n    })\r\n  }\r\n}\r\n\r\nexport default reportWebVitals\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './styles/index.css'\r\nimport App from './components/App'\r\nimport reportWebVitals from './reportWebVitals'\r\nimport { HashRouter } from 'react-router-dom'\r\n\r\nconsole.log(`\r\n ..|''||                             \r\n.|'    ||  .. ...   .... ... ... ... \r\n||      ||  ||  ||   '|.  |   '|..'  \r\n'|.     ||  ||  ||    '|.|     .|.   \r\n ''|...|'  .||. ||.    '|    .|  ||. \r\n                    .. |             \r\n                     ''              \r\n`)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <App />\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\nreportWebVitals()\r\n"],"sourceRoot":""}