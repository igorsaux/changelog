{"version":3,"sources":["abstractions/GitHubCdn.ts","cdn/Vercel.ts","servers/OnyxBay/Changelog.tsx","abstractions/GitHubRepository.ts","servers/OnyxBay/Repository.ts","abstractions/GameServer.ts","components/Changelog.tsx","components/Spinner.tsx","servers/OnyxBay/Server.tsx","servers/OnyxBay/Constants.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["GitHubCDN","cdn","this","url","fetch","method","mode","repository","filePath","join","response","json","owner","name","Vercel","Changelog","props","className","renderDate","Date","date","Author","author","Changes","changes","dateTimeFormat","Intl","DateTimeFormat","day","month","year","format","PrLink","href","pr","Change","prefix","change","toLowerCase","COLOR_BINDINGS","ICON_BINDINGS","rehypePlugins","raw","transformLinkUri","message","map","index","Repository","GameServer","changelogFilePath","ChangelogLayout","theme","children","Body","Header","Spinner","text","LINKS","title","icon","link","previousDate","changelog","entry","drawDate","Error","Server","useState","undefined","error","setError","setChangelog","useEffect","a","fetchJson","data","loadChangelog","bugfix","tweak","soundadd","sounddel","rscadd","rscdel","imageadd","imagedel","maptweak","spellcheck","experiment","admin","balance","App","CDN","OnyxBay","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a26e788f.chunk.js","sourcesContent":["import { GitHubRepository } from './GitHubRepository'\r\n\r\n/**\r\n * Класс для получения данных GitHub через CDN.\r\n */\r\nexport abstract class GitHubCDN {\r\n  /**\r\n   * URL используемого CDN (без / в конце).\r\n   */\r\n  public cdn: string\r\n\r\n  constructor (cdn: string) {\r\n    this.cdn = cdn\r\n  }\r\n\r\n  protected async fetch (url: string): Promise<Response> {\r\n    return await fetch(`${this.cdn}/${url}`, {\r\n      method: 'GET',\r\n      mode: 'cors'\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Получение данных по указанному пути для указанного репозитория в формате JSON.\r\n   * @param repository Репозиторий из которого нужно получить данные.\r\n   * @param filePath Путь до данных (без / в конце).\r\n   */\r\n  public async fetchJson (repository: GitHubRepository, filePath: string): Promise<unknown> {\r\n    const response = await this.fetch(this.join(repository, filePath))\r\n    return await response.json()\r\n  }\r\n\r\n  /**\r\n   * Объединяет информацию о репозитории и путь до файла в один путь (без / в конце).\r\n   * @param repository Репозиторий к которому нужно привязать путь.\r\n   * @param filePath Путь до данных.\r\n   * @example join({ name: 'OnyxBay', owner: 'ChaoticOnyx' }, '/html/changelog.html') => '/ChaoticOnyx/OnyxBay/html/changelog.html'\r\n   */\r\n  public join (repository: GitHubRepository, filePath: string): string {\r\n    return `${repository.owner}/${repository.name}/dev${filePath}`\r\n  }\r\n}\r\n","import { GitHubCDN } from '../abstractions/GitHubCdn'\r\n\r\n/**\r\n * Представляет Vercel CDN.\r\n */\r\nexport class Vercel extends GitHubCDN {\r\n  constructor () {\r\n    super('https://github-cdn.vercel.app')\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactMarkdown from 'react-markdown'\r\nimport raw from 'rehype-raw'\r\nimport { COLOR_BINDINGS, ICON_BINDINGS } from '.'\r\n\r\nexport interface ChangeEntry {\r\n  /**\r\n   * Префикс изменения.\r\n   */\r\n  prefix: string\r\n  /**\r\n   * Описание изменения.\r\n   */\r\n  message: string\r\n  /**\r\n   * Номер PR с которым связано изменение.\r\n   */\r\n  pr?: number\r\n}\r\n\r\nexport interface ChangelogEntry {\r\n  /**\r\n   * Имя автора.\r\n   */\r\n  author: string\r\n  /**\r\n   * Дата изменения в формате `YYYY-MM-DD`.\r\n   */\r\n  date: string\r\n  /**\r\n   * Описание изменении.\r\n   */\r\n  changes: ChangeEntry[]\r\n\r\n  /**\r\n   * Нужно ли выводить дату.\r\n   */\r\n  renderDate: boolean\r\n}\r\n\r\n/**\r\n * Компонент для рендеринга записи из чейнджлога.\r\n */\r\nexport const Changelog = (props: ChangelogEntry) => {\r\n  return <div className='Changelog'>\r\n    {props.renderDate ? <Changelog.Date date={props.date} /> : ''}\r\n    <Changelog.Author author={props.author} />\r\n    <Changelog.Changes changes={props.changes} />\r\n  </div>\r\n}\r\n\r\ninterface DateHeaderProps {\r\n  date: string\r\n}\r\n\r\nconst dateTimeFormat = new Intl.DateTimeFormat('ru-RU', { day: 'numeric', month: 'long', year: 'numeric' })\r\n\r\nconst DateHeader = (props: DateHeaderProps) => {\r\n  return <div className='Changelog__date'>\r\n    <span>{dateTimeFormat.format(new Date(props.date))}</span>\r\n  </div>\r\n}\r\n\r\nChangelog.Date = DateHeader\r\n\r\ninterface ChangeAuthorProps {\r\n  author: string\r\n}\r\n\r\nconst Author = (props: ChangeAuthorProps) => {\r\n  return <h3 className='Changelog__author'>{props.author} updated:</h3>\r\n}\r\n\r\nChangelog.Author = Author\r\n\r\ninterface PrLinkProps {\r\n  pr: number;\r\n}\r\n\r\nconst PrLink = (props: PrLinkProps) => {\r\n  return <sup className='PR'>\r\n    <a className='PR__link' href={`https://github.com/ChaoticOnyx/OnyxBay/pull/${props.pr}`}>#{props.pr}</a>\r\n  </sup>\r\n}\r\n\r\ninterface ChangeProps {\r\n  change: ChangeEntry\r\n}\r\n\r\nconst Change = (props: ChangeProps) => {\r\n  const prefix = props.change.prefix.toLowerCase()\r\n\r\n  return <li className={`Changes__change ${COLOR_BINDINGS[prefix]}`}>\r\n    <i className={ICON_BINDINGS[prefix]} />\r\n    <ReactMarkdown rehypePlugins={\r\n      // @ts-expect-error\r\n      [raw]} transformLinkUri={null}>{props.change.message}</ReactMarkdown>\r\n    {props.change.pr ? <PrLink pr={props.change.pr} /> : ''}\r\n  </li>\r\n}\r\n\r\ninterface ChangesProps {\r\n  changes: ChangeEntry[]\r\n}\r\n\r\nconst Changes = (props: ChangesProps) => {\r\n  return <ul className='Changes'>{props.changes.map((change, index) => {\r\n    return <Change key={index} change={change} />\r\n  })}</ul>\r\n}\r\n\r\nChangelog.Changes = Changes\r\n","/**\r\n * Класс представляющий репозитории GitHub.\r\n */\r\nexport abstract class GitHubRepository {\r\n  /**\r\n   * Название репозитория.\r\n   */\r\n  public readonly name: string\r\n\r\n  /**\r\n   * Владелец репозитория.\r\n   */\r\n  public readonly owner: string\r\n\r\n  constructor (name: string, owner: string) {\r\n    this.name = name\r\n    this.owner = owner\r\n  }\r\n\r\n  /**\r\n   * Получение ссылки на GitHub репозитории.\r\n   */\r\n  public getUrl () {\r\n    return `https://github.com/${this.owner}/${this.name}`\r\n  }\r\n}\r\n","import { GitHubRepository } from '../../abstractions/GitHubRepository'\r\n\r\n/**\r\n * Класс, представляющий репозитории OnyxBay\r\n */\r\nexport class Repository extends GitHubRepository {\r\n  constructor () {\r\n    super('OnyxBay', 'ChaoticOnyx')\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { GitHubRepository } from './GitHubRepository'\r\n\r\n/**\r\n * Класс представляющий игровой сервер SS13.\r\n */\r\nexport abstract class GameServer {\r\n  /**\r\n   * GitHub репозиторий сервера.\r\n   */\r\n  public readonly repository: GitHubRepository\r\n\r\n  /**\r\n   * Путь до чейнджлог файла (без / в конце).\r\n   */\r\n  public readonly changelogFilePath: string\r\n\r\n  constructor (repository: GitHubRepository, changelogFilePath: string) {\r\n    this.repository = repository\r\n    this.changelogFilePath = changelogFilePath\r\n  }\r\n\r\n  /**\r\n   * Возвращает компонент для отрисовки чейнджлога.\r\n   */\r\n  public abstract Changelog(): () => React.ReactElement\r\n}\r\n","import React, { ReactNode } from 'react'\r\nimport '../styles/Changelog.scss'\r\n\r\n/**\r\n * Пропсы для {@link ChangelogLayout}.\r\n */\r\nexport interface ChangelogProps {\r\n  /**\r\n   * Тема чейнджлога, подставляется с префиксом theme-.\r\n   */\r\n  theme?: string\r\n\r\n  children: ReactNode\r\n}\r\n\r\n/**\r\n * Основной компонент чейнджлога.\r\n */\r\nexport const ChangelogLayout = (props: ChangelogProps) => {\r\n  return <div className={`ChangelogLayout ${props.theme ? `theme-${props.theme}` : ''}`}>\r\n    {props.children}\r\n  </div>\r\n}\r\n\r\n/**\r\n * Пропсы для {@link ChangelogLayout.Body}.\r\n */\r\nexport interface BodyProps {\r\n  children: ReactNode\r\n}\r\n\r\nconst Body = (props: BodyProps) => {\r\n  return <div className='ChangelogLayout__body'>\r\n    {props.children}\r\n  </div>\r\n}\r\n\r\n/**\r\n * Шапка чейнджлога.\r\n */\r\nChangelogLayout.Body = Body\r\n\r\n/**\r\n * Пропсы для {@link ChangelogLayout.Header}\r\n */\r\n interface HeaderProps {\r\n  children: ReactNode\r\n}\r\n\r\nconst Header = (props: HeaderProps) => {\r\n  return <div className='ChangelogLayout__header'>\r\n    {props.children}\r\n  </div>\r\n}\r\n\r\n/**\r\n * Шапка чейнджлога.\r\n */\r\nChangelogLayout.Header = Header\r\n","import React from 'react'\r\nimport '../styles/Spinner.scss'\r\n\r\n/**\r\n * Пропсы для {@link Spinner}\r\n */\r\nexport interface SpinnerProps {\r\n  /**\r\n   * Сообщение.\r\n   */\r\n  text: string;\r\n}\r\n\r\n/**\r\n * Спиннер.\r\n */\r\nexport const Spinner = (props: SpinnerProps) => {\r\n  return <div className='Spinner'>\r\n    <i className='Spinner__icon fas fa-spinner'>\r\n    </i><span className='Spinner__text'>{props.text}</span>\r\n  </div>\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Repository } from './Repository'\r\nimport { GameServer } from '../../abstractions/GameServer'\r\nimport { ChangelogLayout } from '../../components/Changelog'\r\nimport { Changelog, ChangelogEntry } from '.'\r\nimport { Spinner } from '../../components/Spinner'\r\nimport { GitHubCDN } from '../../abstractions/GitHubCdn'\r\n\r\ninterface Link {\r\n  title: string\r\n  url: string\r\n  icon: string\r\n}\r\n\r\nconst LINKS: Link[] = [\r\n  {\r\n    title: 'Patreon',\r\n    url: 'https://www.patreon.com/chaoticonyx',\r\n    icon: 'fab fa-patreon'\r\n  },\r\n  {\r\n    title: 'Wiki',\r\n    url: 'https://wiki.ss13.ru',\r\n    icon: 'fas fa-book'\r\n  },\r\n  {\r\n    title: 'GitHub',\r\n    url: 'https://github.com/ChaoticOnyx/OnyxBay',\r\n    icon: 'fab fa-github'\r\n  },\r\n  {\r\n    title: 'Discord',\r\n    url: 'https://discord.gg/5BRMMFg',\r\n    icon: 'fab fa-discord'\r\n  }\r\n]\r\n\r\nconst Header = () => {\r\n  return <>\r\n    <h2>Список изменений сервера Chaotic Onyx</h2>\r\n    <p>Разработка ведется при помощи игроков, которые поддерживают сервер своими пожертвованиями!\r\n      Если вы хотите поддержать нас и принять участие в голосовании за то, какие фичи будут реализованы следующими,\r\n      то подробную информацию можно найти в новостях на нашем сервере Discord!</p>\r\n    <div className='Links'>\r\n      {LINKS.map((link, index) => {\r\n        return <a key={index} title={link.title} href={link.url}>\r\n          <i className={link.icon}></i>\r\n        </a>\r\n      })}\r\n    </div>\r\n  </>\r\n}\r\n\r\ninterface BodyProps {\r\n  changelog: ChangelogEntry[]\r\n}\r\n\r\nconst Body = (props: BodyProps) => {\r\n  let previousDate: string = ''\r\n\r\n  return <>\r\n    {props.changelog.map((entry, index) => {\r\n      let drawDate = true\r\n\r\n      if (previousDate === entry.date) {\r\n        drawDate = false\r\n      } else {\r\n        previousDate = entry.date\r\n      }\r\n\r\n      return <Changelog key={index} {...entry} renderDate={drawDate} />\r\n    })}\r\n  </>\r\n}\r\n\r\ninterface ErrorProps {\r\n  message: string\r\n}\r\n\r\nconst Error = (props: ErrorProps) => {\r\n  return <div className='Error'>{props.message}</div>\r\n}\r\n\r\ninterface ChangelogState {\r\n  changelog?: ChangelogEntry[]\r\n}\r\n\r\n/**\r\n * OnyxBay сервер.\r\n */\r\nexport class Server extends GameServer {\r\n  private cdn: GitHubCDN\r\n\r\n  constructor (cdn: GitHubCDN) {\r\n    super(new Repository(), '/html/changelogs/.all_changelog.json')\r\n\r\n    this.cdn = cdn\r\n  }\r\n\r\n  public Changelog () {\r\n    return () => {\r\n      const [error, setError] = useState<string | undefined>(undefined)\r\n      const [changelog, setChangelog] = useState<ChangelogState>({})\r\n\r\n      useEffect(() => {\r\n        const loadChangelog = async () => {\r\n          try {\r\n            const data = await this.cdn.fetchJson(this.repository, this.changelogFilePath) as ChangelogEntry[]\r\n            setChangelog({\r\n              changelog: data\r\n            })\r\n          } catch (error) {\r\n            setError('Проблемы с подключением ⚠️')\r\n          }\r\n        }\r\n\r\n        loadChangelog()\r\n      }, [])\r\n\r\n      return <ChangelogLayout theme='onyx'>\r\n        <ChangelogLayout.Header>\r\n          <Header />\r\n        </ChangelogLayout.Header>\r\n        <ChangelogLayout.Body>\r\n          {error\r\n            ? <Error message={error} />\r\n            : changelog.changelog\r\n              ? <Body changelog={changelog.changelog!} />\r\n              : <Spinner text='Загрузка чейнджлогов' />}\r\n        </ChangelogLayout.Body>\r\n      </ChangelogLayout>\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Префиксы изменении.\r\n */\r\nexport type ChangePrefix = 'bugfix'\r\n                  | 'tweak'\r\n                  | 'soundadd'\r\n                  | 'sounddel'\r\n                  | 'rscadd'\r\n                  | 'rscdel'\r\n                  | 'imageadd'\r\n                  | 'imagedel'\r\n                  | 'maptweak'\r\n                  | 'spellcheck'\r\n                  | 'experiment'\r\n                  | 'admin'\r\n                  | 'balance'\r\n\r\n/**\r\n * Биндинги префикса изменения к Font Awesome иконки.\r\n */\r\n// WTF\r\n// eslint-disable-next-line no-unused-vars\r\nexport const ICON_BINDINGS: {[key in ChangePrefix as string]: string} = {\r\n  bugfix: 'fas fa-bug',\r\n  tweak: 'fas fa-wrench',\r\n  soundadd: 'fas fa-music',\r\n  sounddel: 'fas fa-minus',\r\n  rscadd: 'fas fa-plus',\r\n  rscdel: 'fas fa-minus',\r\n  imageadd: 'fas fa-palette',\r\n  imagedel: 'fas fa-minus',\r\n  maptweak: 'far fa-compass',\r\n  spellcheck: 'fas fa-spell-check',\r\n  experiment: 'fas fa-hard-hat',\r\n  admin: 'fas fa-crown',\r\n  balance: 'fas fa-balance-scale'\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nexport const COLOR_BINDINGS: {[key in ChangePrefix as string] : string} = {\r\n  bugfix: 'green',\r\n  tweak: 'green',\r\n  soundadd: 'green',\r\n  rscadd: 'green',\r\n  imageadd: 'green',\r\n  maptweak: 'green',\r\n  spellcheck: 'green',\r\n  admin: 'green',\r\n  balance: 'yellow',\r\n  experiment: 'yellow',\r\n  sounddel: 'red',\r\n  rscdel: 'red',\r\n  imagedel: 'red'\r\n}\r\n","import React from 'react'\r\nimport * as CDN from '../cdn'\r\nimport * as OnyxBay from '../servers/OnyxBay'\r\n\r\nfunction App () {\r\n  const cdn = new CDN.Vercel()\r\n  const server = new OnyxBay.Server(cdn)\r\n  const Changelog = server.Changelog()\r\n\r\n  return <Changelog />\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals'\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry)\r\n      getFID(onPerfEntry)\r\n      getFCP(onPerfEntry)\r\n      getLCP(onPerfEntry)\r\n      getTTFB(onPerfEntry)\r\n    })\r\n  }\r\n}\r\n\r\nexport default reportWebVitals\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './styles/index.css'\r\nimport App from './components/App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nconsole.log(`\r\n ..|''||                             \r\n.|'    ||  .. ...   .... ... ... ... \r\n||      ||  ||  ||   '|.  |   '|..'  \r\n'|.     ||  ||  ||    '|.|     .|.   \r\n ''|...|'  .||. ||.    '|    .|  ||. \r\n                    .. |             \r\n                     ''              \r\n`)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\nreportWebVitals()\r\n"],"sourceRoot":""}